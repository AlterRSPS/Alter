plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id 'org.jetbrains.dokka' version '0.9.18'
}

apply plugin: 'application'

description = 'Alter Game'
mainClassName = 'gg.rsmod.game.Launcher'

run {
    workingDir = rootProject.projectDir
}

dependencies {
    compile project(':util')
    compile project(':net')

    runtimeClasspath project(":game:plugins")

    compile "org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-script-runtime:$kotlinVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kcoroutineVersion"

    compile "org.reflections:reflections:$reflectionsVersion"
    compile "commons-io:commons-io:$commonsIoVersion"

    compile "io.github.classgraph:classgraph:$classGraphVersion"
    compile "it.unimi.dsi:fastutil:$fastUtilVersion"

    implementation "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    testImplementation "junit:junit:$junitVersion"
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
}

tasks.register("install") {
    description = 'Install Alter'

    test {
        exclude 'gg/rsmod/game/model/container/**'
    }
    doFirst {
        def cacheList = [
                "/cache/main_file_cache.dat2",
                "/cache/main_file_cache.idx0",
                "/cache/main_file_cache.idx1",
                "/cache/main_file_cache.idx2",
                "/cache/main_file_cache.idx3",
                "/cache/main_file_cache.idx4",
                "/cache/main_file_cache.idx5",
                "/cache/main_file_cache.idx7",
                "/cache/main_file_cache.idx8",
                "/cache/main_file_cache.idx9",
                "/cache/main_file_cache.idx10",
                "/cache/main_file_cache.idx11",
                "/cache/main_file_cache.idx12",
                "/cache/main_file_cache.idx13",
                "/cache/main_file_cache.idx14",
                "/cache/main_file_cache.idx15",
                "/cache/main_file_cache.idx16",
                "/cache/main_file_cache.idx17",
                "/cache/main_file_cache.idx18",
                "/cache/main_file_cache.idx19",
                "/cache/main_file_cache.idx20",
                "/cache/main_file_cache.idx255",
                "xteas.json"
        ]
        cacheList.forEach {
            File file = new File("${rootProject.projectDir}/data/$it")
            if (!file.exists()) {
                throw new GradleException("\u001B[45m \u001B[30m Missing file! : $file. Go back to: https://github.com/AlterRSPS/Alter and read how to setup plz >____> It's so easy to set this up and you failed at it wtfff?!?!. \u001B[0m")
            }
        }
    }

    doLast {
        copy {
            into "${rootProject.projectDir}/"
            from "${rootProject.projectDir}/game.example.yml"
            rename 'game.example.yml', 'game.yml'
            from "${rootProject.projectDir}/dev-settings.example.yml"
            rename 'dev-settings.example.yml', 'dev-settings.yml'
            file("${rootProject.projectDir}/first-launch").createNewFile()
        }
        javaexec {
            workingDir = rootProject.projectDir
            classpath = sourceSets.main.runtimeClasspath
            main = "gg.rsmod.game.service.rsa.RsaService"
            args = [ "16", "2048", "./data/rsa/key.pem" ] // radix, bitcount, rsa pem file
        }
    }
}

task extractDependencies(type: Copy) {
    from(zipTree("build/distributions/game-${project.version}.zip")) {
        include "game-${project.version}/lib/*"
        eachFile {
            path = name
        }
        includeEmptyDirs = false
    }
    into 'build/deps'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
}

applicationDistribution.from("$rootDir/data/") {
    into 'bin/data/'
    include '**'
    exclude 'saves/*'
}

applicationDistribution.from("$rootDir") {
    into 'bin'
    include 'plugins/*'
    include 'game.example.yml'
    rename 'game.example.yml', 'game.yml'
}

shadowDistZip {
    from("$rootDir/data/") {
        into "game-shadow-${project.version}/bin/data/"
        include '**'
        exclude 'saves/*'
    }

    from("$rootDir") {
        into "game-shadow-${project.version}/bin/"
        include 'plugins/*'
        include 'game.example.yml'
        rename 'game.example.yml', 'game.yml'
    }
}

shadowDistTar {
    from("$rootDir/data/") {
        into "game-shadow-${project.version}/bin/data/"
        include '**'
        exclude 'saves/*'
    }

    from("$rootDir") {
        into "game-shadow-${project.version}/bin/"
        include 'plugins/*'
        include 'game.example.yml'
        rename 'game.example.yml', 'game.yml'
    }
}

build.finalizedBy extractDependencies
install.dependsOn build